︠ea6bfcc5-1ec4-4f64-9fb5-05cbbb85e910s︠
p = int(input("p ="))
a = int(input("a ="))
b = int(input("b ="))

K = GF(p)

G = EllipticCurve(K,[a,b])
print G
print G.points()

P = G.gen(0)
print "The generator on G is: ", P

n = P.order()
print "The order of the point P is: ", n

r = randint(1,n)
print "The private key r is: ", r

Q = r*P
print "The public key Q is: ", Q

#begin_Koblitz
f(x) = x**3+a*x+b
l = 10
mes = 5
i = 0
while(True):
    flag = legendre_symbol(f(mes*l+i),p)
    if flag==1:
        print "i =",i
        break;
    else:
        if i<l:
            i = i+1
        else:
            break;

x = mes*l+i
print "x =",x

y = mod((x**3+2*x+7),p).sqrt()
print "y =",y

m = G(x,y,1)
print "m =",m
#end_Koblitz

#begin_Encryption
k = randint(1,n)
print "The private key k is: ", k

C1 = k*P
C2 = m+k*Q
print "The cyphertext is: ",(C1,C2)
#end_Encryption

#begin_Decryption
pt = C2-r*C1
print "The plaintext is: ", pt
#end_Decryption

#begin_Verification
print m == pt

x1 = int(pt.xy()[0])
print mes == floor(x1/l)
#end_Verification
︡f04b4ead-a14a-4cca-b888-4f22ccd5f02d︡{"raw_input":{"prompt":"p ="}}︡{"delete_last":true}︡{"raw_input":{"prompt":"p =","submitted":true,"value":"179"}}︡{"raw_input":{"prompt":"a ="}}︡{"delete_last":true}︡{"raw_input":{"prompt":"a =","submitted":true,"value":"2"}}︡{"raw_input":{"prompt":"b ="}}︡{"delete_last":true}︡{"raw_input":{"prompt":"b =","submitted":true,"value":"7"}}︡{"stdout":"Elliptic Curve defined by y^2 = x^3 + 2*x + 7 over Finite Field of size 179\n"}︡{"stdout":"[(0 : 1 : 0), (2 : 52 : 1), (2 : 127 : 1), (5 : 58 : 1), (5 : 121 : 1), (6 : 45 : 1), (6 : 134 : 1), (8 : 78 : 1), (8 : 101 : 1), (11 : 69 : 1), (11 : 110 : 1), (13 : 34 : 1), (13 : 145 : 1), (17 : 11 : 1), (17 : 168 : 1), (18 : 46 : 1), (18 : 133 : 1), (20 : 23 : 1), (20 : 156 : 1), (22 : 73 : 1), (22 : 106 : 1), (23 : 76 : 1), (23 : 103 : 1), (26 : 56 : 1), (26 : 123 : 1), (28 : 78 : 1), (28 : 101 : 1), (29 : 17 : 1), (29 : 162 : 1), (31 : 44 : 1), (31 : 135 : 1), (32 : 34 : 1), (32 : 145 : 1), (33 : 63 : 1), (33 : 116 : 1), (35 : 23 : 1), (35 : 156 : 1), (36 : 4 : 1), (36 : 175 : 1), (37 : 16 : 1), (37 : 163 : 1), (39 : 79 : 1), (39 : 100 : 1), (40 : 30 : 1), (40 : 149 : 1), (41 : 51 : 1), (41 : 128 : 1), (43 : 53 : 1), (43 : 126 : 1), (44 : 84 : 1), (44 : 95 : 1), (46 : 43 : 1), (46 : 136 : 1), (49 : 35 : 1), (49 : 144 : 1), (51 : 11 : 1), (51 : 168 : 1), (52 : 5 : 1), (52 : 174 : 1), (54 : 43 : 1), (54 : 136 : 1), (55 : 77 : 1), (55 : 102 : 1), (57 : 7 : 1), (57 : 172 : 1), (58 : 29 : 1), (58 : 150 : 1), (59 : 38 : 1), (59 : 141 : 1), (60 : 49 : 1), (60 : 130 : 1), (61 : 73 : 1), (61 : 106 : 1), (62 : 63 : 1), (62 : 116 : 1), (63 : 81 : 1), (63 : 98 : 1), (66 : 55 : 1), (66 : 124 : 1), (67 : 30 : 1), (67 : 149 : 1), (70 : 2 : 1), (70 : 177 : 1), (71 : 66 : 1), (71 : 113 : 1), (72 : 30 : 1), (72 : 149 : 1), (75 : 32 : 1), (75 : 147 : 1), (76 : 76 : 1), (76 : 103 : 1), (77 : 85 : 1), (77 : 94 : 1), (79 : 43 : 1), (79 : 136 : 1), (80 : 76 : 1), (80 : 103 : 1), (84 : 63 : 1), (84 : 116 : 1), (85 : 42 : 1), (85 : 137 : 1), (93 : 53 : 1), (93 : 126 : 1), (96 : 73 : 1), (96 : 106 : 1), (97 : 42 : 1), (97 : 137 : 1), (99 : 18 : 1), (99 : 161 : 1), (103 : 18 : 1), (103 : 161 : 1), (104 : 8 : 1), (104 : 171 : 1), (105 : 41 : 1), (105 : 138 : 1), (106 : 13 : 1), (106 : 166 : 1), (107 : 3 : 1), (107 : 176 : 1), (110 : 2 : 1), (110 : 177 : 1), (111 : 11 : 1), (111 : 168 : 1), (112 : 3 : 1), (112 : 176 : 1), (114 : 14 : 1), (114 : 165 : 1), (115 : 68 : 1), (115 : 111 : 1), (116 : 75 : 1), (116 : 104 : 1), (121 : 28 : 1), (121 : 151 : 1), (122 : 12 : 1), (122 : 167 : 1), (123 : 86 : 1), (123 : 93 : 1), (124 : 23 : 1), (124 : 156 : 1), (127 : 40 : 1), (127 : 139 : 1), (130 : 20 : 1), (130 : 159 : 1), (132 : 39 : 1), (132 : 140 : 1), (134 : 34 : 1), (134 : 145 : 1), (139 : 3 : 1), (139 : 176 : 1), (141 : 38 : 1), (141 : 141 : 1), (142 : 37 : 1), (142 : 142 : 1), (143 : 78 : 1), (143 : 101 : 1), (144 : 77 : 1), (144 : 102 : 1), (145 : 33 : 1), (145 : 146 : 1), (148 : 88 : 1), (148 : 91 : 1), (149 : 79 : 1), (149 : 100 : 1), (150 : 21 : 1), (150 : 158 : 1), (151 : 4 : 1), (151 : 175 : 1), (152 : 26 : 1), (152 : 153 : 1), (153 : 10 : 1), (153 : 169 : 1), (156 : 18 : 1), (156 : 161 : 1), (158 : 38 : 1), (158 : 141 : 1), (159 : 77 : 1), (159 : 102 : 1), (161 : 15 : 1), (161 : 164 : 1), (164 : 19 : 1), (164 : 160 : 1), (167 : 89 : 1), (167 : 90 : 1), (169 : 47 : 1), (169 : 132 : 1), (170 : 79 : 1), (170 : 100 : 1), (171 : 4 : 1), (171 : 175 : 1), (174 : 87 : 1), (174 : 92 : 1), (176 : 42 : 1), (176 : 137 : 1), (178 : 2 : 1), (178 : 177 : 1)]\n"}︡{"stdout":"The generator on G is:  (46 : 136 : 1)\n"}︡{"stdout":"The order of the point P is:  195\n"}︡{"stdout":"The private key r is:  142\n"}︡{"stdout":"The public key Q is:  (66 : 55 : 1)\n"}︡{"stdout":"i = 1\n"}︡{"stdout":"x = 51\n"}︡{"stdout":"y = 11\n"}︡{"stdout":"m = (51 : 11 : 1)\n"}︡{"stdout":"The private key k is:  107\n"}︡{"stdout":"The cyphertext is:  ((36 : 4 : 1), (145 : 33 : 1))\n"}︡{"stdout":"The plaintext is:  (51 : 11 : 1)\n"}︡{"stdout":"True\n"}︡{"stdout":"True\n"}︡{"done":true}︡









